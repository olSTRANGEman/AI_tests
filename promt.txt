Дано:
API - https://petstore.swagger.io/;
Спецификация - https://petstore.swagger.io/v2/swagger.json;
Файл с метриками - https://github.com/olSTRANGEman/AI_tests/blob/main/metrics.py
Пример вывода метрик - https://github.com/olSTRANGEman/AI_tests/blob/main/output.txt

Задача:
На основе спецификации сгенерировать на языке Python набор тестов (файл test_api.py), обеспечивающий максимальное покрытие данного API.

Требования к выполнению:
1) При генерации тестов использовать библиотеку pytest;
2) Все сгенерированные тесты должны находиться в файле test_api.py и быть изолированными относительно друг друга с точки зрения используемых данных;
3) Общее количество тестов должно быть не менее 50;
4) Для каждого из endpoint'ов необходимо получить все описанные статус-коды, кроме default;
5) Проведи авторизацию в слуаче необходимости
6) - Для проверки статус-кодов необходимо сравнивать полученный ответ напрямую с response.status_code;
7) - Запрещается исользовать json-формат для отправки data, даже если он явно прописан в спецификации;
8) - Запрещается интегрировать файл метрик в тесты
9) - Запрещается использовать классы. Требуется использовать только функции. 


Описания тестов:
1. Юнит-тесты
Для каждого эндпоинта и всех его методов:
   - Создать функцию вида test_<тип метода>_<путь>()` (например, `test_get_pet_by_id()`);
   - Создать позитивные тесты с валидными параметрами/телом, проверив соответствие статус-кода и схемы (типы полей, обязательные ключи);
   - Создать негативные тесты (некорректные параметры или отсутствующие поля), проверив соответствие статус-кода ошибки;
   - Создать дополнительный тесты, если два предыдущих не покрывают спецификацию;
   - Эти сценарии должны быть отдельными функциями, даже если покрывают один и тот же endpoint.

2. Интеграционные тесты (сквозные сценарии)
Сгенерировать не менее двух функций следующих типов:
   - `test_crud_<resource>_flow()`: последовательно выполняет операции Create → Read → Update → Delete в рамках одного раздела;
   - `test_auth_and_access_flow()`: авторизуется (получает токен), выполняет защищённый запрос и проверяет получение ошибки при некорректном токене.

3. Тесты отказоустойчивости и нагрузочное тестирование
Для ключевых эндпоинтов добавить:  
   - Многократные некорректные запросы подряд (проверка rate-limit и наличия защиты от флуда);  
   - Запрос с очень большим JSON-телом (проверка ограничений ввода);
   - Симуляция задержки ответа (параметр `timeout` в `requests`), чтобы вызвать `requests.exceptions.Timeout`.

