Дано:
API - https://petstore3.swagger.io;
Спецификация - https://petstore3.swagger.io/api/v3/openapi.json;
Файл с метриками - [указать ссылку из публичного репозитория на файл с метриками (metrics.py)];
Пример вывода метрик - [указать ссылку из публичного репозитория на файл с текстом вывода результата метрик];

Задача:
На основе спецификации сгенерировать на языке Python набор тестов (файл test_api.py), обеспечивающий максимальное покрытие данного API.

Требования к выполнению:
1) При генерации тестов использовать библиотеку pytest;
2) Все сгенерированные тесты должны находиться в файле test_api.py и быть изолированными относительно друг друга с точки зрения используемых данных;
3) Общее количество тестов должно быть не менее 50;
4) Файл metrics.py должен быть интегрирован в test_api.py таким образом, чтобы после выполнения всех сгенерированных тестов полученные метрики выводились в консоль в соответствии с шаблоном из примера;
5) Для каждого из endpoint'ов необходимо получить все описанные статус-коды, кроме default;


6) - При написании запросов следует придерживаться структуры вида resp = requests.delete(f"{BASE_URL}/pet/0");
7) - Для проверки статус-кодов необходимо сравнивать полученный ответ напрямую с response.status_code;
8) - Запрещается исользовать json-формат для отправки data, даже если он явно прописан в спецификации;
9) - Запрещено использование пробелов при вызове API.
10) - Не используй классы. Требуется использовать только функции. Не допускай пробелов в вызове api


Описания тестов:
1. Юнит-тесты
Для каждого эндпоинта и всех его методов:
   - Создать функцию вида test_<тип метода>_<путь>()` (например, `test_get_pet_by_id()`);
   - Создать позитивные тесты с валидными параметрами/телом, проверив соответствие статус-кода и схемы (типы полей, обязательные ключи);
   - Создать негативные тесты (некорректные параметры или отсутствующие поля), проверив соответствие статус-кода ошибки;
   - Создать дополнительный тесты, если два предыдущих не покрывают спецификацию;
   - Эти сценарии должны быть отдельными функциями, даже если покрывают один и тот же endpoint.

2. Интеграционные тесты (сквозные сценарии)
Сгенерировать не менее двух функций следующих типов:
   - `test_crud_<resource>_flow()`: последовательно выполняет операции Create → Read → Update → Delete в рамках одного раздела;
   - `test_auth_and_access_flow()`: авторизуется (получает токен), выполняет защищённый запрос и проверяет получение ошибки при некорректном токене.

3. Тесты отказоустойчивости и нагрузочное тестирование
Для ключевых эндпоинтов добавить:  
   - Многократные некорректные запросы подряд (проверка rate-limit и наличия защиты от флуда);  
   - Запрос с очень большим JSON-телом (проверка ограничений ввода);
   - Симуляция задержки ответа (параметр `timeout` в `requests`), чтобы вызвать `requests.exceptions.Timeout`.

